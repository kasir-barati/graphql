services:
  redis:
    image: bitnami/redis:7.4.1-debian-12-r2
    restart: always
    container_name: redis-container
    ports:
      - ${REDIS_PORT}:${REDIS_PORT_NUMBER}
    volumes:
      - redis:/bitnami/redis/data
    environment:
      REDIS_AOF_ENABLED: yes
      REDIS_DATABASE: redis
      REDIS_PORT_NUMBER: ${REDIS_PORT_NUMBER}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "redis-cli -a $$REDIS_PASSWORD -p $$REDIS_PORT_NUMBER ping | grep PONG",
        ]
      interval: 5s
      timeout: 5s
      retries: 5

  redis-insight:
    image: redis/redisinsight:latest
    restart: always
    container_name: redis-insight-container
    ports:
      - 5540:5540
    volumes:
      - redis-insight:/data
    depends_on:
      redis:
        condition: service_healthy
    environment:
      RI_APP_PORT: 5540
      RI_LOG_LEVEL: debug
    healthcheck:
      test: [
          "CMD-SHELL",
          "node",
          "--experimental-default-type=module",
          '-e "console.log((await fetch(''http://localhost:5540/api/health/'')).ok =
          == true && ''healthy'')"',
        ]
      interval: 5s
      timeout: 3s
      retries: 5
  
  postgres:
    image: postgres:17.0-alpine3.20
    # To enable logging queries:
    command: "-c log_statement=all"
    restart: always
    ports:
      - "${POSTGRESQL_EXPOSED_PORT}:5432"
    volumes:
      - postgres:/var/lib/postgresql/data/pgdata
    env_file:
      - .env
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 5s
      timeout: 5s
      retries: 5

  pgAdmin:
    image: dpage/pgadmin4:8.4
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "${PGADMIN_EXPOSED_PORT}:80"
    configs:
      - source: servers.json
        target: /pgadmin4/servers.json
      - source: preferences.json
        target: /pgadmin4/preferences.json

configs:
  preferences.json:
    content: |
      {
        "preferences": {
          "misc:themes:theme": "dark",
          "browser:display:show_system_objects": true,
          "browser:display:confirm_on_refresh_close": false,
          "browser:display:show_user_defined_templates": true
        }
      }
  servers.json:
    content: |
      {
        "Servers": {
          "1": {
            "Group": "Servers",
            "Name": "Database name",
            "Host": "postgres",
            "Port": 5432,
            "MaintenanceDB": "${POSTGRES_DB}",
            "Username": "${POSTGRES_USER}",
            "SSLMode": "prefer",
            "BGColor": "#FF4500",
            "FGColor": "#222222",
            "Comment": "This server will connect to the instance we've created in our compose file."
          }
        }
      }

volumes:
  postgres:
  redis:
  redis-insight:
